name: Deploy AWS Lambda Functions

on:
  push:
    branches: [main]
    paths:
      - 'lambda/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_PREFIX: notion-law-collector
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('lambda/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd lambda
          pip install -r requirements.txt
          pip install pytest moto
      
      - name: Run unit tests
        run: |
          cd tests
          python -m pytest test_lambda_functions.py -v
        env:
          NOTION_API_SECRET_ARN: "arn:aws:secretsmanager:us-east-1:123456789012:secret:test-secret"
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  deploy:
    name: Deploy Lambda Functions
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install dependencies
        run: |
          cd lambda
          pip install -r requirements.txt -t ./package/
          cp *.py ./package/
      
      - name: Create deployment packages
        run: |
          cd lambda/package
          
          # Create test_connection function package
          zip -r ../test-connection-deployment.zip . -x "create_page.py" "query_database.py"
          
          # Create create_page function package  
          zip -r ../create-page-deployment.zip . -x "test_connection.py" "query_database.py"
          
          # Create query_database function package
          zip -r ../query-database-deployment.zip . -x "test_connection.py" "create_page.py"
      
      - name: Deploy test-connection Lambda function
        run: |
          FUNCTION_NAME="${{ env.LAMBDA_FUNCTION_PREFIX }}-test-connection"
          
          # Check if function exists
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "Updating existing function: $FUNCTION_NAME"
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://lambda/test-connection-deployment.zip
            
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --timeout 30 \
              --memory-size 256 \
              --environment Variables="{NOTION_API_SECRET_ARN=${{ secrets.NOTION_API_SECRET_ARN }}}"
          else
            echo "Creating new function: $FUNCTION_NAME"
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime python3.9 \
              --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
              --handler test_connection.lambda_handler \
              --zip-file fileb://lambda/test-connection-deployment.zip \
              --timeout 30 \
              --memory-size 256 \
              --environment Variables="{NOTION_API_SECRET_ARN=${{ secrets.NOTION_API_SECRET_ARN }}}"
          fi
      
      - name: Deploy create-page Lambda function
        run: |
          FUNCTION_NAME="${{ env.LAMBDA_FUNCTION_PREFIX }}-create-page"
          
          # Check if function exists
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "Updating existing function: $FUNCTION_NAME"
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://lambda/create-page-deployment.zip
            
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --timeout 30 \
              --memory-size 256 \
              --environment Variables="{NOTION_API_SECRET_ARN=${{ secrets.NOTION_API_SECRET_ARN }}}"
          else
            echo "Creating new function: $FUNCTION_NAME"
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime python3.9 \
              --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
              --handler create_page.lambda_handler \
              --zip-file fileb://lambda/create-page-deployment.zip \
              --timeout 30 \
              --memory-size 256 \
              --environment Variables="{NOTION_API_SECRET_ARN=${{ secrets.NOTION_API_SECRET_ARN }}}"
          fi
      
      - name: Deploy query-database Lambda function
        run: |
          FUNCTION_NAME="${{ env.LAMBDA_FUNCTION_PREFIX }}-query-database"
          
          # Check if function exists
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "Updating existing function: $FUNCTION_NAME"
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://lambda/query-database-deployment.zip
            
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --timeout 30 \
              --memory-size 256 \
              --environment Variables="{NOTION_API_SECRET_ARN=${{ secrets.NOTION_API_SECRET_ARN }}}"
          else
            echo "Creating new function: $FUNCTION_NAME"
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime python3.9 \
              --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
              --handler query_database.lambda_handler \
              --zip-file fileb://lambda/query-database-deployment.zip \
              --timeout 30 \
              --memory-size 256 \
              --environment Variables="{NOTION_API_SECRET_ARN=${{ secrets.NOTION_API_SECRET_ARN }}}"
          fi
      
      - name: Create/Update API Gateway (optional)
        run: |
          # This step is optional - you can also invoke Lambda functions directly
          # or set up API Gateway manually through the AWS console
          echo "Lambda functions deployed successfully!"
          echo "Function URLs:"
          echo "- Test Connection: ${{ env.LAMBDA_FUNCTION_PREFIX }}-test-connection"
          echo "- Create Page: ${{ env.LAMBDA_FUNCTION_PREFIX }}-create-page" 
          echo "- Query Database: ${{ env.LAMBDA_FUNCTION_PREFIX }}-query-database"
      
      - name: Test deployed functions
        run: |
          # Test that functions are deployed and responsive
          TEST_FUNCTION="${{ env.LAMBDA_FUNCTION_PREFIX }}-test-connection"
          
          # Test with a minimal payload to check function is working
          TEST_PAYLOAD='{"httpMethod": "GET", "queryStringParameters": {"databaseId": "test"}}'
          
          echo "Testing deployed function: $TEST_FUNCTION"
          aws lambda invoke \
            --function-name $TEST_FUNCTION \
            --payload "$TEST_PAYLOAD" \
            response.json
          
          echo "Function response:"
          cat response.json
          
          # Check if response contains expected structure
          if grep -q '"statusCode"' response.json; then
            echo "✅ Function deployed successfully and responding correctly"
          else
            echo "❌ Function deployment may have issues"
            exit 1
          fi

  cleanup:
    name: Cleanup Build Artifacts
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Cleanup
        run: |
          echo "Deployment completed. Build artifacts cleaned up automatically."