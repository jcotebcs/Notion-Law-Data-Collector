name: Fetch Notion Data

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
    # Allow manual trigger
  push:
    branches: [main]
    paths:
      - '.github/workflows/fetch-notion-data.yml'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  fetch-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install requests
      
      - name: Create data directory
        run: |
          mkdir -p data
      
      - name: Fetch Notion database
        id: fetch
        run: |
          python3 << 'EOF'
          import requests
          import json
          import os
          from datetime import datetime
          
          # Get secrets from environment
          notion_token = os.environ.get('NOTION_TOKEN')
          database_id = os.environ.get('NOTION_DATABASE_ID')
          
          if not notion_token or not database_id:
              print("❌ Missing required secrets: NOTION_TOKEN and NOTION_DATABASE_ID")
              print("Please add these to your repository secrets")
              exit(1)
          
          # Notion API headers
          headers = {
              'Authorization': f'Bearer {notion_token}',
              'Notion-Version': '2022-06-28',
              'Content-Type': 'application/json'
          }
          
          try:
              # First, get database info
              db_response = requests.get(
                  f'https://api.notion.com/v1/databases/{database_id}',
                  headers=headers
              )
              
              if not db_response.ok:
                  print(f"❌ Failed to fetch database info: {db_response.status_code}")
                  print(f"Response: {db_response.text}")
                  exit(1)
              
              database_info = db_response.json()
              print(f"✅ Connected to database: {database_info.get('title', [{}])[0].get('plain_text', 'Unknown')}")
              
              # Query database for entries
              query_response = requests.post(
                  f'https://api.notion.com/v1/databases/{database_id}/query',
                  headers=headers,
                  json={
                      "sorts": [
                          {
                              "timestamp": "created_time",
                              "direction": "descending"
                          }
                      ],
                      "page_size": 100
                  }
              )
              
              if not query_response.ok:
                  print(f"❌ Failed to query database: {query_response.status_code}")
                  print(f"Response: {query_response.text}")
                  exit(1)
              
              query_data = query_response.json()
              
              # Process the data
              processed_entries = []
              for page in query_data.get('results', []):
                  props = page.get('properties', {})
                  
                  # Extract properties based on common field names
                  entry = {
                      'id': page.get('id'),
                      'created_time': page.get('created_time'),
                      'last_edited_time': page.get('last_edited_time'),
                      'caseName': '',
                      'caseDate': '',
                      'court': '',
                      'judge': '',
                      'caseType': '',
                      'status': '',
                      'notes': ''
                  }
                  
                  # Extract case name (title field)
                  if 'Case Name' in props and props['Case Name'].get('title'):
                      entry['caseName'] = props['Case Name']['title'][0].get('plain_text', '')
                  elif 'Name' in props and props['Name'].get('title'):
                      entry['caseName'] = props['Name']['title'][0].get('plain_text', '')
                  
                  # Extract date
                  if 'Date' in props and props['Date'].get('date'):
                      entry['caseDate'] = props['Date']['date'].get('start', '')
                  elif 'Case Date' in props and props['Case Date'].get('date'):
                      entry['caseDate'] = props['Case Date']['date'].get('start', '')
                  
                  # Extract court
                  if 'Court' in props and props['Court'].get('rich_text'):
                      entry['court'] = props['Court']['rich_text'][0].get('plain_text', '')
                  
                  # Extract judge
                  if 'Judge' in props and props['Judge'].get('rich_text'):
                      entry['judge'] = props['Judge']['rich_text'][0].get('plain_text', '')
                  
                  # Extract case type
                  if 'Case Type' in props and props['Case Type'].get('select'):
                      entry['caseType'] = props['Case Type']['select'].get('name', '')
                  elif 'Type' in props and props['Type'].get('select'):
                      entry['caseType'] = props['Type']['select'].get('name', '')
                  
                  # Extract status
                  if 'Status' in props and props['Status'].get('select'):
                      entry['status'] = props['Status']['select'].get('name', '')
                  
                  # Extract notes
                  if 'Notes' in props and props['Notes'].get('rich_text'):
                      entry['notes'] = props['Notes']['rich_text'][0].get('plain_text', '')
                  
                  processed_entries.append(entry)
              
              # Create the final data structure
              output_data = {
                  'lastUpdated': datetime.now().isoformat(),
                  'databaseInfo': {
                      'id': database_info.get('id'),
                      'title': database_info.get('title', [{}])[0].get('plain_text', 'Notion Database'),
                      'url': database_info.get('url', ''),
                      'total_entries': len(processed_entries)
                  },
                  'entries': processed_entries,
                  'metadata': {
                      'version': '1.0',
                      'source': 'github-actions',
                      'fetchedAt': datetime.now().isoformat()
                  }
              }
              
              # Write to file
              with open('data/notion-data.json', 'w') as f:
                  json.dump(output_data, f, indent=2)
              
              print(f"✅ Successfully processed {len(processed_entries)} entries")
              print(f"📄 Data saved to data/notion-data.json")
              
              # Also create a summary file
              summary = {
                  'lastUpdated': datetime.now().isoformat(),
                  'totalEntries': len(processed_entries),
                  'databaseTitle': database_info.get('title', [{}])[0].get('plain_text', 'Notion Database'),
                  'status': 'success'
              }
              
              with open('data/summary.json', 'w') as f:
                  json.dump(summary, f, indent=2)
              
          except Exception as e:
              print(f"❌ Error: {str(e)}")
              
              # Create error file
              error_data = {
                  'lastUpdated': datetime.now().isoformat(),
                  'status': 'error',
                  'error': str(e),
                  'entries': [],
                  'metadata': {
                      'version': '1.0',
                      'source': 'github-actions',
                      'fetchedAt': datetime.now().isoformat()
                  }
              }
              
              with open('data/notion-data.json', 'w') as f:
                  json.dump(error_data, f, indent=2)
                  
              exit(1)
          EOF
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
      
      - name: Commit and push data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add data files
          git add data/
          
          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Notion data - $(date -u +"%Y-%m-%d %H:%M UTC")"
            git push
            echo "✅ Data committed and pushed"
          fi
      
      - name: Upload data as artifact
        uses: actions/upload-artifact@v4
        with:
          name: notion-data
          path: data/
          retention-days: 7